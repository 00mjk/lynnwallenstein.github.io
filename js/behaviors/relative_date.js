var getMoment, refreshRelativeDates, relativeTimeFormat, relativeTimeOldFormat, setTimeText;

relativeTimeFormat = {
  future: "%s from now",
  past: "%s ago",
  s: "seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};

relativeTimeOldFormat = {
  future: "%s",
  past: "%s",
  s: "seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};

getMoment = function(datetime) {
  return moment(datetime, "YYYY-MM-DDTHH:mm:ssZ");
};

setTimeText = function($el, text) {
  if (text === "a few seconds ago") {
    text = "just now";
  }
  return $el.show().text(text);
};

refreshRelativeDates = function(container) {
  var $el, el, i, j, len, len1, nowMoment, ref, ref1, results, text, time;
  if (container == null) {
    container = document;
  }
  nowMoment = moment();
  moment.locale("en", {
    relativeTime: relativeTimeFormat
  });
  ref = $(container).find("time.js-relative-date");
  for (i = 0, len = ref.length; i < len; i++) {
    el = ref[i];
    $el = $(el);
    time = getMoment($el.attr('datetime'));
    text = time.fromNow();
    setTimeText($el, text);
  }
  moment.locale("en", {
    relativeTime: relativeTimeOldFormat
  });
  ref1 = $(container).find("time.js-relative-old");
  results = [];
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    el = ref1[j];
    $el = $(el);
    time = getMoment($el.attr("datetime"));
    text = time.fromNow();
    results.push(setTimeText($el, text));
  }
  return results;
};

$(function() {
  refreshRelativeDates();
  return setInterval(refreshRelativeDates, 60000);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlaGF2aW9ycy9yZWxhdGl2ZV9kYXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkEsSUFBQTs7QUFBQSxrQkFBQSxHQUNFO0VBQUEsTUFBQSxFQUFRLGFBQVI7RUFDQSxJQUFBLEVBQU0sUUFETjtFQUVBLENBQUEsRUFBRyxTQUZIO0VBR0EsQ0FBQSxFQUFHLFVBSEg7RUFJQSxFQUFBLEVBQUksWUFKSjtFQUtBLENBQUEsRUFBRyxTQUxIO0VBTUEsRUFBQSxFQUFJLFVBTko7RUFPQSxDQUFBLEVBQUcsT0FQSDtFQVFBLEVBQUEsRUFBSSxTQVJKO0VBU0EsQ0FBQSxFQUFHLFNBVEg7RUFVQSxFQUFBLEVBQUksV0FWSjtFQVdBLENBQUEsRUFBRyxRQVhIO0VBWUEsRUFBQSxFQUFJLFVBWko7OztBQWNGLHFCQUFBLEdBQ0U7RUFBQSxNQUFBLEVBQVEsSUFBUjtFQUNBLElBQUEsRUFBTSxJQUROO0VBRUEsQ0FBQSxFQUFHLFNBRkg7RUFHQSxDQUFBLEVBQUcsVUFISDtFQUlBLEVBQUEsRUFBSSxZQUpKO0VBS0EsQ0FBQSxFQUFHLFNBTEg7RUFNQSxFQUFBLEVBQUksVUFOSjtFQU9BLENBQUEsRUFBRyxPQVBIO0VBUUEsRUFBQSxFQUFJLFNBUko7RUFTQSxDQUFBLEVBQUcsU0FUSDtFQVVBLEVBQUEsRUFBSSxXQVZKO0VBV0EsQ0FBQSxFQUFHLFFBWEg7RUFZQSxFQUFBLEVBQUksVUFaSjs7O0FBY0YsU0FBQSxHQUFZLFNBQUMsUUFBRDtTQUNWLE1BQUEsQ0FBTyxRQUFQLEVBQWlCLHNCQUFqQjtBQURVOztBQUdaLFdBQUEsR0FBYyxTQUFDLEdBQUQsRUFBTSxJQUFOO0VBQ1osSUFBcUIsSUFBQSxLQUFRLG1CQUE3QjtJQUFBLElBQUEsR0FBTyxXQUFQOztTQUNBLEdBQUcsQ0FBQyxJQUFKLENBQUEsQ0FBVSxDQUFDLElBQVgsQ0FBZ0IsSUFBaEI7QUFGWTs7QUFJZCxvQkFBQSxHQUF1QixTQUFDLFNBQUQ7QUFDckIsTUFBQTs7SUFEc0IsWUFBWTs7RUFDbEMsU0FBQSxHQUFZLE1BQUEsQ0FBQTtFQUVaLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZCxFQUNFO0lBQUEsWUFBQSxFQUFjLGtCQUFkO0dBREY7QUFFQTtBQUFBLE9BQUEscUNBQUE7O0lBQ0UsR0FBQSxHQUFNLENBQUEsQ0FBRSxFQUFGO0lBQ04sSUFBQSxHQUFPLFNBQUEsQ0FBVSxHQUFHLENBQUMsSUFBSixDQUFTLFVBQVQsQ0FBVjtJQUNQLElBQUEsR0FBTyxJQUFJLENBQUMsT0FBTCxDQUFBO0lBQ1AsV0FBQSxDQUFZLEdBQVosRUFBaUIsSUFBakI7QUFKRjtFQU1BLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZCxFQUNFO0lBQUEsWUFBQSxFQUFjLHFCQUFkO0dBREY7QUFFQTtBQUFBO09BQUEsd0NBQUE7O0lBQ0UsR0FBQSxHQUFNLENBQUEsQ0FBRSxFQUFGO0lBQ04sSUFBQSxHQUFPLFNBQUEsQ0FBVSxHQUFHLENBQUMsSUFBSixDQUFTLFVBQVQsQ0FBVjtJQUNQLElBQUEsR0FBTyxJQUFJLENBQUMsT0FBTCxDQUFBO2lCQUNQLFdBQUEsQ0FBWSxHQUFaLEVBQWlCLElBQWpCO0FBSkY7O0FBYnFCOztBQXFCdkIsQ0FBQSxDQUFFLFNBQUE7RUFDQSxvQkFBQSxDQUFBO1NBQ0EsV0FBQSxDQUFZLG9CQUFaLEVBQWtDLEtBQWxDO0FBRkEsQ0FBRiIsImZpbGUiOiJiZWhhdmlvcnMvcmVsYXRpdmVfZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgUmVsYXRpdmUgRGF0ZSBGaWx0ZXJcbiNcbiM9IHJlcXVpcmUgbW9tZW50XG4jXG4jIFJld3JpdGVzIHRpbWVzdGFtcHMgYXMgZHluYW1pYyByZWxhdGl2ZSBvbmVzLlxuI1xuIyAgICAgbGVzcyB0aGFuIGEgbWludXRlIGFnb1xuIyAgICAgYWJvdXQgYSBtb250aCBhZ29cbiMgICAgIDIgeWVhcnMgYWdvXG4jXG4jICMjIyBNYXJrdXBcbiNcbiMgQSBgdGltZWAgZWxlbWVudCB3aXRoIHRoZSBjbGFzcyBuYW1lIGBqcy1yZWxhdGl2ZS1kYXRlYCBtdXN0IGJlIHVzZWRcbiMgYXMgYSB3cmFwcGVyLiBUaGUgZGF0ZXRpbWUgc3RyaW5nIHNob3VsZCBiZSBpbiBJU08gODYwMSBhcyBwZXIgdGhlXG4jIEhUTUw1IHNwZWMuIFRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aWxsIGJlIHJlcGxhY2VkLiBCdXQgaXRzXG4jIHN0aWxsIGdvb2QgdG8gcHJvdmlkZSBhIGRlY2VudCBmYWxsYmFjay5cbiNcbiMgYGBgIGh0bWxcbiMgPHRpbWUgY2xhc3M9XCJqcy1yZWxhdGl2ZS1kYXRlXCIgZGF0ZXRpbWU9XCI8JT0gY3JlYXRlZF9hdC5pc284NjAxICU+XCI+XG4jICAgPCU9IGNyZWF0ZWRfYXQudG9fZGF0ZSAlPlxuIyA8L3RpbWU+XG4jIGBgYFxuI1xuXG5yZWxhdGl2ZVRpbWVGb3JtYXQgPVxuICBmdXR1cmU6IFwiJXMgZnJvbSBub3dcIixcbiAgcGFzdDogXCIlcyBhZ29cIixcbiAgczogXCJzZWNvbmRzXCIsXG4gIG06IFwiYSBtaW51dGVcIixcbiAgbW06IFwiJWQgbWludXRlc1wiLFxuICBoOiBcImFuIGhvdXJcIixcbiAgaGg6IFwiJWQgaG91cnNcIixcbiAgZDogXCJhIGRheVwiLFxuICBkZDogXCIlZCBkYXlzXCIsXG4gIE06IFwiYSBtb250aFwiLFxuICBNTTogXCIlZCBtb250aHNcIixcbiAgeTogXCJhIHllYXJcIixcbiAgeXk6IFwiJWQgeWVhcnNcIlxuXG5yZWxhdGl2ZVRpbWVPbGRGb3JtYXQgPVxuICBmdXR1cmU6IFwiJXNcIixcbiAgcGFzdDogXCIlc1wiLFxuICBzOiBcInNlY29uZHNcIixcbiAgbTogXCJhIG1pbnV0ZVwiLFxuICBtbTogXCIlZCBtaW51dGVzXCIsXG4gIGg6IFwiYW4gaG91clwiLFxuICBoaDogXCIlZCBob3Vyc1wiLFxuICBkOiBcImEgZGF5XCIsXG4gIGRkOiBcIiVkIGRheXNcIixcbiAgTTogXCJhIG1vbnRoXCIsXG4gIE1NOiBcIiVkIG1vbnRoc1wiLFxuICB5OiBcImEgeWVhclwiLFxuICB5eTogXCIlZCB5ZWFyc1wiXG5cbmdldE1vbWVudCA9IChkYXRldGltZSkgLT5cbiAgbW9tZW50IGRhdGV0aW1lLCBcIllZWVktTU0tRERUSEg6bW06c3NaXCJcblxuc2V0VGltZVRleHQgPSAoJGVsLCB0ZXh0KSAtPlxuICB0ZXh0ID0gXCJqdXN0IG5vd1wiIGlmIHRleHQgaXMgXCJhIGZldyBzZWNvbmRzIGFnb1wiXG4gICRlbC5zaG93KCkudGV4dCB0ZXh0XG5cbnJlZnJlc2hSZWxhdGl2ZURhdGVzID0gKGNvbnRhaW5lciA9IGRvY3VtZW50KSAtPlxuICBub3dNb21lbnQgPSBtb21lbnQoKVxuXG4gIG1vbWVudC5sb2NhbGUgXCJlblwiLFxuICAgIHJlbGF0aXZlVGltZTogcmVsYXRpdmVUaW1lRm9ybWF0XG4gIGZvciBlbCBpbiAkKGNvbnRhaW5lcikuZmluZCBcInRpbWUuanMtcmVsYXRpdmUtZGF0ZVwiXG4gICAgJGVsID0gJChlbClcbiAgICB0aW1lID0gZ2V0TW9tZW50KCRlbC5hdHRyKCdkYXRldGltZScpKVxuICAgIHRleHQgPSB0aW1lLmZyb21Ob3coKVxuICAgIHNldFRpbWVUZXh0ICRlbCwgdGV4dFxuXG4gIG1vbWVudC5sb2NhbGUgXCJlblwiLFxuICAgIHJlbGF0aXZlVGltZTogcmVsYXRpdmVUaW1lT2xkRm9ybWF0XG4gIGZvciBlbCBpbiAkKGNvbnRhaW5lcikuZmluZCBcInRpbWUuanMtcmVsYXRpdmUtb2xkXCJcbiAgICAkZWwgPSAkKGVsKVxuICAgIHRpbWUgPSBnZXRNb21lbnQoJGVsLmF0dHIoXCJkYXRldGltZVwiKSlcbiAgICB0ZXh0ID0gdGltZS5mcm9tTm93KClcbiAgICBzZXRUaW1lVGV4dCAkZWwsIHRleHRcblxuXG4jIFJlZnJlc2ggcmVsYXRpdmUgZGF0ZXMgZXZlcnkgbWluXG4kIC0+XG4gIHJlZnJlc2hSZWxhdGl2ZURhdGVzKClcbiAgc2V0SW50ZXJ2YWwgcmVmcmVzaFJlbGF0aXZlRGF0ZXMsIDYwMDAwXG4iXX0=
